{
  "hash": "b263e578c2c55528038a4b419e241d7b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"90 Ball Bingo\"\nauthor: \"JRowing\"\ndate: \"2025-04-19\"\ncategories: [Interesting problems, R Models]\n---\n\n\n\nCreating a 90-ball bingo card can be challenging because of several key rules and requirements that must be followed, including the distribution of numbers, the uniqueness of each row, and ensuring a balanced and fair game. Here's why it's particularly tricky:\n\n1. Fixed Number Range per Column\nIn 90-ball bingo, there are 90 possible numbers, ranging from 1 to 90. The card consists of 3 rows and 9 columns, with each column corresponding to a specific range of numbers:\n\nColumn 1: Numbers 1–9\n\nColumn 2: Numbers 10–19\n\nColumn 3: Numbers 20–29\n\nAnd so on until...\n\nColumn 9: Numbers 80–90\n\nThe challenge comes from the need to distribute the numbers across the 9 columns so that:\n\nEach column contains a random selection of numbers from the correct range.\n\nThe total number of numbers in the card is limited (i.e., each row contains only 5 numbers and each column contains exactly 3 numbers).\n\n2. Ensuring No Duplicates\nEach bingo card must be unique — no two cards can have the same number in the same place. This means that not only do we need to distribute the numbers according to the column ranges, but we also have to ensure that across multiple cards, the number placement is randomized without repeating the exact same pattern.\n\n3. Each Row Must Contain 5 Numbers\nA 90-ball bingo card has 3 rows and 9 columns, but only 5 numbers per row. This means that in each row, there will be some empty cells (spots with no numbers). The challenge is to:\n\nEnsure that the numbers are spread out across the entire row while keeping the 5-number constraint.\n\nMaintain a consistent structure across multiple cards.\n\n4. Ensuring Fair Distribution\nFor the game to be fair, numbers should be distributed as evenly as possible across the 9 columns. This means ensuring that there are no biases, such as certain columns being overly dense with numbers or others being too sparse. The balancing between columns is vital to prevent players from having an unfair advantage.\n\n5. Randomization\nWhile bingo cards are created with specific rules for how numbers are placed, there is still a randomness aspect involved. Ensuring that every generated card adheres to the required constraints (e.g., 3 numbers per column, 5 numbers per row) while still being unique and random adds an additional layer of complexity.\n\n6. Maintaining Consistency with Game Rules\n90-ball bingo has 3 types of wins: line, two lines, and full house. Ensuring that the card layout doesn’t favor one type of win over another or create any unintentional patterns adds to the challenge of card creation.\n\nThis is my effort:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_bingo_card <- function() {\n  # Define column ranges\n  col_ranges <- list(\n    1:9, 10:19, 20:29, 30:39, 40:49,\n    50:59, 60:69, 70:79, 80:90\n  )\n  \n  repeat {\n    # Create an empty card with NA values\n    card <- matrix(NA, nrow = 3, ncol = 9)\n    positions <- matrix(0, nrow = 3, ncol = 9)\n    \n    # Step 1: Randomly assign 5 filled positions per row\n    for (i in 1:3) {\n      positions[i, sample(1:9, 5)] <- 1\n    }\n\n    # Step 2: Ensure every column has at least one number\n    cols_with_numbers <- colSums(positions)\n    if (all(cols_with_numbers > 0)) break\n  }\n\n  # Step 3: Fill in numbers from correct column ranges\n  for (col in 1:9) {\n    n_numbers <- sum(positions[, col])\n    numbers <- sort(sample(col_ranges[[col]], n_numbers))\n    rows <- which(positions[, col] == 1)\n    for (i in seq_along(rows)) {\n      card[rows[i], col] <- numbers[i]\n    }\n  }\n  \n  card\n}\n\nformat_bingo_card <- function(card) {\n  apply(card, 1, function(row) {\n    paste(sprintf(\"%2s\", ifelse(is.na(row), \".\", row)), collapse = \" \")\n  })\n}\n\ngenerate_and_save_bingo_cards <- function(n_cards = 5, filename = \"bingo_tickets.txt\") {\n  lines <- c()\n  for (i in 1:n_cards) {\n    card <- generate_bingo_card()\n    lines <- c(lines, sprintf(\"Card %d:\", i))\n    lines <- c(lines, format_bingo_card(card))\n    lines <- c(lines, \"\")  # Blank line between cards\n  }\n  writeLines(lines, con = filename)\n  message(\"Bingo cards saved to \", filename)\n}\n\n# Run it\nset.seed(42)\ngenerate_and_save_bingo_cards(n_cards = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBingo cards saved to bingo_tickets.txt\n```\n\n\n:::\n:::\n\n\n\nCard 1:\n 1 17 25  .  . 51 61  .  .\n .  .  . 33 45 54 63 71  .\n . 19 27 39  .  .  . 77 82\n\nCard 2:\n 8 10  .  . 48  . 62 74  .\n . 14  . 33  . 53  . 75 84\n . 18 26  . 49 58  . 77  .\n\nCard 3:\n .  . 29 37 40 52  . 75  .\n 1  .  . 39 44  . 60  . 84\n 5 16  .  . 48 58  .  . 87\n\nCard 4:\n 1 10  .  .  .  . 63 79 80\n . 12 29 30  .  . 69  . 83\n . 14  . 34 42 55  .  . 89\n\nCard 5:\n 1  . 20 38 45 53  .  .  .\n 4 15  .  .  . 55 66 75  .\n 9 17 25  . 49  .  .  . 89\n\n",
    "supporting": [
      "90ballbingo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}